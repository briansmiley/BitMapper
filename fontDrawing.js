let charErrorLogged = {};
/*
  drawString takes 6 arguments: 
  1. the string to be printed
  2.&3. x,y coodinates of the **bottom left corner** of the first character
  4. letter color
  5. (optional?) the target graphics element,should default to a main canvas?
  6. (optional, default true) whether to Uppercase all chars in string
      (this is set to true because I didnt add lowercase letters yet)
   
   It returns {offsetX, offsetY} which can be used to access the location
   of the last written character

   It should automatically wrap when it hits the edge of the canvas and supports newline characters

   Recommend using drawString even for single characters
*/
function drawString(
  inStr,
  x,
  y,
  charColor,
  targetGraphics = canvas,
  toUpper = true
) {
  let offsetX = 0;
  let offsetY = 0;
  if (toUpper) str = inStr.toUpperCase();
  for (char of str) {
    const charPix = getFontChar(char);
    if (
      char == "\n" ||
      x + offsetX + charPix[0].length >= targetGraphics.width
    ) {
      offsetY += font.lineHeight;
      offsetX = 0;
      if (char == "\n") continue;
    }
    drawCharacter(charPix, x + offsetX, y + offsetY, charColor, targetGraphics);
    offsetX += charPix[0].length;
  }
  return { offsetX, offsetY };
}

function drawCharacter(charPixels, charX, charY, charColor, targetGraphics) {
  targetGraphics.loadPixels();
  /*
    charX, charY should be bottom left corner of character
    so pixel position is charX + pixelX (normal)
    and charY - (charHeight - pixelY); i.e. start at bottom corner then move up
  */
  for (let [pixelY, row] of charPixels.entries()) {
    for (let [pixelX, pixel] of row.entries()) {
      if (pixel)
        targetGraphics.set(
          charX + pixelX,
          charY - (charPixels.length - 1 - pixelY),
          charColor
        );
    }
  }
  targetGraphics.updatePixels();
}
function getFontChar(char) {
  let ret;
  try {
    ret = font.chars[char];
    if (!ret) {
      ret = font.chars["█"];
      if (!charErrorLogged[char]) {
        charErrorLogged[char] = true;
        throw new Error(`${char} is not in the font`);
      }
    }
  } catch (e) {
    console.error(e.message);
  } finally {
    return ret;
  }
}

/*
const font = {
  "lineHeight": 6,
  "chars": {
    "█": [
      [0, 1, 1, 1],
      [0, 1, 1, 1],
      [0, 1, 1, 1],
      [0, 1, 1, 1],
      [0, 1, 1, 1]
    ],

    "A": [
      [0, 0, 1, 1, 0],
      [0, 1, 0, 0, 1],
      [0, 1, 1, 1, 1],
      [0, 1, 0, 0, 1],
      [0, 1, 0, 0, 1]
    ],
    "B": [
      [0, 1, 1, 1, 0],
      [0, 1, 0, 0, 1],
      [0, 1, 1, 1, 0],
      [0, 1, 0, 0, 1],
      [0, 1, 1, 1, 0]
    ],
    "C": [
      [0, 0, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 0, 0],
      [0, 1, 0, 0],
      [0, 0, 1, 1]
    ],

    "D": [
      [0, 1, 1, 0],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 0]
    ],
    "E": [
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 1, 1]
    ],
    "F": [
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 0, 0]
    ],
    "G": [
      [0, 0, 1, 1, 1],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 1, 1],
      [0, 1, 0, 0, 1],
      [0, 0, 1, 1, 0]
    ],

    "H": [
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1]
    ],
    "I": [
      [0, 1, 1, 1],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 1, 1, 1]
    ],
    "J": [
      [0, 0, 1, 1, 1],
      [0, 0, 0, 1, 0],
      [0, 0, 0, 1, 0],
      [0, 1, 0, 1, 0],
      [0, 1, 1, 1, 0]
    ],
    "K": [
      [0, 1, 0, 0, 1],
      [0, 1, 0, 1, 0],
      [0, 1, 1, 0, 0],
      [0, 1, 0, 1, 0],
      [0, 1, 0, 0, 1]
    ],
    "L": [
      [0, 1, 0, 0],
      [0, 1, 0, 0],
      [0, 1, 0, 0],
      [0, 1, 0, 0],
      [0, 1, 1, 1]
    ],
    "M": [
      [0, 1, 0, 0, 0, 1],
      [0, 1, 1, 0, 1, 1],
      [0, 1, 0, 1, 0, 1],
      [0, 1, 0, 0, 0, 1],
      [0, 1, 0, 0, 0, 1]
    ],
    "N": [
      [0, 1, 0, 0, 1],
      [0, 1, 1, 0, 1],
      [0, 1, 0, 1, 1],
      [0, 1, 0, 0, 1],
      [0, 1, 0, 0, 1]
    ],
    "O": [
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1]
    ],
    "P": [
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 0, 0]
    ],
    "Q": [
      [0, 1, 1, 1, 1],
      [0, 1, 0, 0, 1],
      [0, 1, 0, 0, 1],
      [0, 1, 0, 1, 0],
      [0, 1, 1, 0, 1]
    ],
    "R": [
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1],
      [0, 1, 1, 0],
      [0, 1, 0, 1]
    ],
    "S": [
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 1, 1, 1]
    ],

    "T": [
      [0, 1, 1, 1],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 0]
    ],
    "U": [
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1]
    ],
    "V": [
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 0, 1, 0]
    ],
    "W": [
      [0, 1, 0, 0, 0, 1],
      [0, 1, 0, 0, 0, 1],
      [0, 1, 0, 1, 0, 1],
      [0, 1, 0, 1, 0, 1],
      [0, 0, 1, 0, 1, 0]
    ],
    "X": [
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 0, 1, 0],
      [0, 1, 0, 1],
      [0, 1, 0, 1]
    ],
    "Y": [
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 0]
    ],
    "Z": [
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 0, 1, 0],
      [0, 1, 0, 0],
      [0, 1, 1, 1]
    ],

    " ": [
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0]
    ],
    "0": [
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1]
    ],

    "1": [
      [0, 1, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 1, 1, 1]
    ],

    "2": [
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 1, 1]
    ],

    "3": [
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 1, 1, 1]
    ],

    "4": [
      [0, 1, 0, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 0, 0, 1]
    ],
    "5": [
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 1, 1, 1]
    ],
    "6": [
      [0, 1, 1, 1],
      [0, 1, 0, 0],
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1]
    ],
    "7": [
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 0, 0, 1],
      [0, 0, 0, 1],
      [0, 0, 0, 1]
    ],
    "8": [
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1]
    ],

    "9": [
      [0, 1, 1, 1],
      [0, 1, 0, 1],
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 0, 0, 1]
    ],
    "`": [
      [0, 1, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0]
    ],
    "~": [
      [0, 0, 0, 0, 0],
      [0, 0, 1, 0, 1],
      [0, 1, 0, 1, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0]
    ],

    "!": [
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 0],
      [0, 0, 1, 0]
    ],
    "@": [
      [0, 0, 1, 1, 1, 0],
      [0, 1, 0, 0, 0, 1],
      [0, 1, 0, 1, 1, 1],
      [0, 1, 0, 1, 0, 1],
      [0, 0, 0, 1, 1, 0]
    ],

    "#": [
      [0, 0, 1, 0, 1, 0],
      [0, 1, 1, 1, 1, 1],
      [0, 0, 1, 0, 1, 0],
      [0, 1, 1, 1, 1, 1],
      [0, 0, 1, 0, 1, 0]
    ],

    "$": [
      [0, 0, 1, 1, 1, 1],
      [0, 1, 0, 1, 0, 0],
      [0, 0, 1, 1, 1, 0],
      [0, 0, 0, 1, 0, 1],
      [0, 1, 1, 1, 1, 0]
    ],
    "%": [
      [0, 1, 1, 0, 0, 1],
      [0, 1, 1, 0, 1, 0],
      [0, 0, 0, 1, 0, 0],
      [0, 0, 1, 0, 1, 1],
      [0, 1, 0, 0, 1, 1]
    ],
    "^": [
      [0, 0, 1, 0],
      [0, 1, 0, 1],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0]
    ],
    "&": [
      [0, 0, 1, 1, 0],
      [0, 1, 0, 1, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 0, 1, 0],
      [0, 1, 1, 0, 1]
    ],
    "*": [
      [0, 1, 0, 1],
      [0, 0, 1, 0],
      [0, 1, 0, 1],
      [0, 0, 0, 0],
      [0, 0, 0, 0]
    ],
    "(": [
      [0, 0, 1],
      [0, 1, 0],
      [0, 1, 0],
      [0, 1, 0],
      [0, 0, 1]
    ],
    ")": [
      [0, 1, 0],
      [0, 0, 1],
      [0, 0, 1],
      [0, 0, 1],
      [0, 1, 0]
    ],
    "-": [
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 1, 1, 1],
      [0, 0, 0, 0],
      [0, 0, 0, 0]
    ],
    "+": [
      [0, 0, 0, 1, 0, 0],
      [0, 0, 0, 1, 0, 0],
      [0, 1, 1, 1, 1, 1],
      [0, 0, 0, 1, 0, 0],
      [0, 0, 0, 1, 0, 0]
    ],
    "_": [
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 1, 1, 1]
    ],

    "=": [
      [0, 0, 0, 0, 0],
      [0, 1, 1, 1, 1],
      [0, 0, 0, 0, 0],
      [0, 1, 1, 1, 1],
      [0, 0, 0, 0, 0]
    ],
    "/": [
      [0, 0, 0, 0, 1],
      [0, 0, 0, 1, 1],
      [0, 0, 1, 1, 0],
      [0, 1, 1, 0, 0],
      [0, 1, 0, 0, 0]
    ],
    "\\": [
      [0, 1, 0, 0, 0],
      [0, 1, 1, 0, 0],
      [0, 0, 1, 1, 0],
      [0, 0, 0, 1, 1],
      [0, 0, 0, 0, 1]
    ],
    "<": [
      [0, 0, 0, 1],
      [0, 0, 1, 0],
      [0, 1, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1]
    ],
    ">": [
      [0, 1, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1],
      [0, 0, 1, 0],
      [0, 1, 0, 0]
    ],
    ".": [
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 1]
    ],
    "?": [
      [0, 0, 1, 1, 0],
      [0, 1, 0, 0, 1],
      [0, 0, 0, 1, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 1, 0]
    ],

    ",": [
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 1],
      [0, 0, 1]
    ],
    ";": [
      [0, 0, 0],
      [0, 0, 1],
      [0, 0, 0],
      [0, 0, 1],
      [0, 0, 1]
    ],
    ":": [
      [0, 0, 0],
      [0, 0, 1],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 1]
    ],
    "'": [
      [0, 1, 0],
      [0, 1, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0]
    ],
    "\"": [
      [0, 1, 0],
      [0, 1, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0]
    ],
    "[": [
      [0, 1, 1],
      [0, 1, 0],
      [0, 1, 0],
      [0, 1, 0],
      [0, 1, 1]
    ],
    "]": [
      [0, 1, 1],
      [0, 0, 1],
      [0, 0, 1],
      [0, 0, 1],
      [0, 1, 1]
    ],
    "|": [
      [0, 1, 0],
      [0, 1, 0],
      [0, 1, 0],
      [0, 1, 0],
      [0, 1, 0]
    ],
    "{": [
      [0, 0, 1, 1],
      [0, 0, 1, 0],
      [0, 1, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 1]
    ],

    "}": [
      [0, 1, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1],
      [0, 0, 1, 0],
      [0, 1, 1, 0]
    ],
    "\n": []
  }
}
*/
